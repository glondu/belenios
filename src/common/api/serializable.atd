(**************************************************************************)
(*                                BELENIOS                                *)
(*                                                                        *)
(*  Copyright Â© 2012-2023 Inria                                           *)
(*                                                                        *)
(*  This program is free software: you can redistribute it and/or modify  *)
(*  it under the terms of the GNU Affero General Public License as        *)
(*  published by the Free Software Foundation, either version 3 of the    *)
(*  License, or (at your option) any later version, with the additional   *)
(*  exemption that compiling, linking, and/or using OpenSSL is allowed.   *)
(*                                                                        *)
(*  This program is distributed in the hope that it will be useful, but   *)
(*  WITHOUT ANY WARRANTY; without even the implied warranty of            *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *)
(*  Affero General Public License for more details.                       *)
(*                                                                        *)
(*  You should have received a copy of the GNU Affero General Public      *)
(*  License along with this program.  If not, see                         *)
(*  <http://www.gnu.org/licenses/>.                                       *)
(**************************************************************************)

<doc text="API-specific serializable datatypes">

type uuid = string wrap <ocaml module="Belenios_core.Common_types.Uuid">
type template <ocaml predef from="Belenios_core.Serializable"> = abstract

type 'a trustee_public_key <ocaml predef from="Belenios_core.Serializable"> = abstract
type cert <ocaml predef from="Belenios_core.Serializable"> = abstract
type vinput <ocaml predef from="Belenios_core.Serializable"> = abstract
type 'a voutput <ocaml predef from="Belenios_core.Serializable"> = abstract
type 'a trustees <ocaml predef from="Belenios_core.Serializable"> = abstract

type validation_error =
  [ NoTitle
  | NoQuestions
  | NoAdministrator
  | NoCredentialAuthority
  | NoVoters
  | TooManyVoters
  | MissingPasswords
  | MissingPublicCredentials
  | TrusteesNotReady
  | WeightsAreIncompatibleWithNH
  | NotSinglePrivateKey
  | KeyEstablishmentNotFinished
  ]

type error =
  [ GenericError of string
  | NotInExpectedState
  | CannotChange of string
  | Invalid of string
  | Unsupported of string
  | Missing of string
  | MissingVoter of string
  | ValidationError of validation_error
  ]

type request_status = {
    code : int;
    status : string;
    error : error;
}

type configured_authentication = {
    instance : string;
    system : string;
} <ocaml field_prefix="configured_">

type authentication_system =
  [ Password
  | CAS
  | Configured of configured_authentication
  ]

type configuration = {
    privacy_policy : string;
    belenios_version : string;
    belenios_build : string;
    spec_version : string;
    api_version : int;
    supported_crypto_versions : int list;
    supported_booth_versions : int list;
    authentications : authentication_system list;
    default_group : string;
    default_nh_group : string;
    max_voters : int;
    languages : (string * string) list <json repr="object">;
}

type api_account = {
    id : int;
    name : string;
    address : string;
    ?language : string option;
    default_voter_languages : string list;
    default_contact : string;
}

type authentication =
  [ Password
  | CAS of string
  | Configured of string
  ]

type draft = {
    version : int;
    owners : int list;
    questions : template;
    languages : string list;
    ?contact : string option;
    booth : int;
    authentication : authentication;
    group : string;
} <ocaml field_prefix="draft_">

type 'a pedersen = {
    threshold : int;
    step : int;
    certs : cert list <ocaml repr="array">;
    ?vinput : vinput option;
    ?voutput : 'a voutput option;
} <ocaml field_prefix="pedersen_">

type kind =
  [ Validated
  | Tallied
  | Archived
  ]

type summary = {
    uuid : uuid;
    name : string;
    date : float;
    ?kind : kind option;
} <ocaml field_prefix="summary_">

type summary_list = summary list

type voter_list <ocaml predef from="Belenios_core.Serializable"> = abstract

type string_list = string list

type public_credentials = string list
type private_credentials <ocaml predef from="Belenios_core.Serializable"> = abstract

type 'a trustee = {
    ?address : string option;
    name : string;
    ?token : string option;
    ?state : int option;
    ?key : 'a option;
} <ocaml field_prefix="trustee_">

type basic_trustees = {
    trustees : abstract trustee_public_key trustee list;
} <ocaml field_prefix="bt_">

type threshold_trustees = {
    ?threshold : int option;
    trustees : cert trustee list;
} <ocaml field_prefix="tt_">

type draft_trustees =
  [ Basic of basic_trustees
  | Threshold of threshold_trustees
  ]

type draft_status = {
    num_voters : int;
    ?passwords_ready : bool option;
    credentials_ready : bool;
    ?private_credentials_downloaded : bool option;
    trustees_ready : bool;
    nh_and_weights_compatible : bool;
    credential_authority_visited : bool;
    voter_authentication_visited : bool;
    trustees_setup_step : int;
}

type draft_request =
  [ SetDownloaded
  | ValidateElection
  | SetCredentialAuthorityVisited
  | SetVoterAuthenticationVisited
  | SetTrusteesSetupStep of int
  ]

type trustees_request =
  [ Add of abstract trustee
  | Import of uuid
  | SetBasic
  | SetThreshold of int
  ]

type voters_request =
  [ Import of uuid
  ]

type state =
  [ Open
  | Closed
  | Shuffling
  | EncryptedTally
  | Tallied
  | Archived
  ]

type election_status = {
   state : state;
   auto_delete_date : float;
   ?auto_archive_date : float option;
   ?postpone_date : float option;
} <ocaml field_prefix="status_">

type election_auto_dates = {
    ?open : float option;
    ?close : float option;
} <ocaml field_prefix="auto_date_">

type voting_record = {
    date : float;
    username : string;
} <ocaml field_prefix="vr_">

type records = voting_record list

type admin_request =
  [ Open
  | Close
  | ComputeEncryptedTally
  | FinishShuffling
  | ReleaseTally
  | Archive
  | RegeneratePassword of string
  | SetPostponeDate of float nullable
  ]

type trustee_pd = {
    address : string;
    token : string;
    done : bool;
} <ocaml field_prefix="trustee_pd_">

type partial_decryptions = {
    trustees : trustee_pd list;
    ?threshold : int option;
} <ocaml field_prefix="partial_decryptions_">

type tally_trustee = {
    ?private_key : string option;
} <ocaml field_prefix="tally_trustee_">

type shuffler = {
    address : string;
    ?token : string option;
    ?fingerprint : string option;
} <ocaml field_prefix="shuffler_">

type shuffles = {
    shufflers : shuffler list;
} <ocaml field_prefix="shuffles_">

type shuffler_request =
  [ Skip
  | Select
  ]
